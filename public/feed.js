// Generated by CoffeeScript 1.3.3
(function() {
  var Application, TweetView, defaultTimeout, defaultTweetView, socket;

  Application = Thorax.Application.create({
    template: "<table>\n  <tr>\n    <td valign=\"center\" align=\"center\">\n      {{layout}}\n    </td>\n  </tr>\n</table>"
  });

  $(function() {
    return $('body').append(Application.el);
  });

  TweetView = Application.View.extend({
    content: function() {
      var url, _ref, _ref1;
      if ((_ref = this.model.attributes.entities) != null ? (_ref1 = _ref.urls) != null ? _ref1.length : void 0 : void 0) {
        url = this.model.attributes.entities.urls[0];
        if (url.expanded_url.match(/\.(gif|jpeg|jpg|png)$/)) {
          return new Handlebars.SafeString('<img src="' + url.expanded_url + '">');
        }
      }
      return this.model.attributes.text;
    },
    template: "{{#if fromSignin}} {{else}}<h3>{{user.name}} <small>@{{user.screen_name}}</small></h3>{{/if}}\n<h1>{{content}}</h1>"
  });

  defaultTweetView = Application.View.create({
    defaultContent: 'Please Sign in!<br/>app.seattlejs.com<br/><small>Tweet to display your message</small>',
    initialize: function() {
      var _this = this;
      this.content = this.defaultContent;
      return setInterval(function() {
        _this.content = _.shuffle(['No one? Really?', 'Tweet pictures... Backhanded comments...', 'Will start displaying @beiber soon if no one tweets', 'Bhueler...']).pop();
        _this.render();
        return setTimeout(function() {
          _this.content = _this.defaultContent;
          return _this.render();
        }, 5000);
      }, 60000);
    },
    template: "<h2>{{{content}}}</h2><h1>#seattlejs</h1>"
  });

  Application.setView(defaultTweetView, {
    destroy: false
  });

  defaultTimeout = null;

  socket = io.connect('http://' + window.location.host);

  socket.on('tweet', function(tweet) {
    var tweetView;
    tweet.fromSignin = tweet.user.screen_name === 'SeattleBackbone';
    tweetView = TweetView.create({
      model: Application.Model.create(tweet)
    });
    Application.setView(tweetView, {
      destroy: true
    });
    console.log(tweet);
    clearTimeout(defaultTimeout);
    return defaultTimeout = setTimeout(function() {
      return Application.setView(defaultTweetView, {
        destroy: false
      });
    }, 30000);
  });

}).call(this);
